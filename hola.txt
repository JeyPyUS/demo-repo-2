self = <MagicMock name='read_sql_query' id='1793416386128'>
args = ("select dat_fact, cod_classinfinity, per_returnday from tmp_sam_per_calculorentabilidades_2_new where cod_classinfinity in ('clase2');", 's')
kwargs = {}, effect = <list_iterator object at 0x000001A18FEE7310>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration
